import {
  Connection,
  Keypair,
  LAMPORTS_PER_SOL,
  PublicKey,
  sendAndConfirmTransaction,
  Transaction,
} from '@solana/web3.js';
import chai, { expect } from 'chai';
import chaiAsPromised from 'chai-as-promised';


import {
  createNameRegistry,
  deleteNameRegistry,
  getHashedName,
  getNameAccountKey,
  NameRegistryState,
  reallocNameAccount,
  transferNameOwnership,
  updateNameRegistryData,
} from '../../src';

import Irys from "@irys/sdk";
import type BigNumber from "bignumber.js";
import type { UploadResponse } from "@irys/sdk/build/cjs/common/types";
import fetch from "node-fetch";
import Query from "@irys/query";
import dotenv from "dotenv";
import { FilesManager } from 'turbodepot-node';
import fs from "fs";


// ============================================================================
// https://docs.irys.xyz/hands-on/tutorials/provenance-chain
// https://docs.irys.xyz/developer-docs/querying/query-package
// ============================================================================

dotenv.config();

const dateToHumanReadable = (date) => {
	const options = {
		year: "numeric",
		month: "2-digit",
		day: "2-digit",
		hour: "2-digit",
		minute: "2-digit",
		second: "2-digit",
		fractionalSecondDigits: 3, // milliseconds
	};
 
	// Pass "undefined" to force the default local to be used for formatting
	return date.toLocaleString(undefined, options);
};

// Query for all transactions tagged as having a root-tx matching ours
// You could optionally expand on this by querying for the `owner` value
// and making sure it matches the wallet address used to upload
// the original transactions.
const getProveanceChainSDK = async (rootTxId: string): Promise<any[]>  => {
	const provenanceChainData: any[] = [];
 
	// Connect to a Query object
	const myQuery = new Query({ url: "https://devnet.irys.xyz/graphql" });
 
	// First, get the root TX
	const rootTx = await myQuery
		.search("irys:transactions")
		.ids([rootTxId]);
  
  //console.log("Data retrieved from Irys = " + rootTx + "\n");

	// Extract the id and timestamp and download the data payload
	if (rootTx) {
		const unixTimestamp = rootTx[0].timestamp;
		const date = new Date(unixTimestamp);
		const humanReadable = dateToHumanReadable(date); 
 
		const url = `https://gateway.irys.xyz/${rootTx[0].id}`;
		const response = await fetch(url);
		const data = await response.text();
 
		const provenanceEntry = { Date: humanReadable, Data: humanReadable };
    //const provenanceEntry = { Date: humanReadable, Data: data };
		provenanceChainData.push(provenanceEntry);
	}
 
	// Now, get the provenance chain
	const chain = await myQuery
		.search("irys:transactions")
		.tags([{ name: "root-tx", values: [rootTxId] }]);
  
  //console.log("Data retrieved from Irys = " + chain + "\n");

	// Iterate over entries
	for (const item of chain) {
		const unixTimestamp = item.timestamp;
		const date = new Date(unixTimestamp);
		const humanReadable = dateToHumanReadable(date);
 
		const url = `https://gateway.irys.xyz/${item.id}`;
		const response = await fetch(url);
		const data = await response.text();
 
		const provenanceEntry = { Date: humanReadable, Data: humanReadable };
    //const provenanceEntry = { Date: humanReadable, Data: data };
		provenanceChainData.push(provenanceEntry);
	}
	return provenanceChainData;
};

// Print the full provenance chain in a table
const printProvenanceChainSDK = async (rootTxId: string): Promise<void> => {
	const provenanceChainData = await getProveanceChainSDK(rootTxId);
	console.table(provenanceChainData);
};

async function getIrys(): Promise<Irys> {
  const url = "https://devnet.irys.xyz";
  const providerUrl = "https://api.devnet.solana.com";
  const token = "solana";
  const privateKey = process.env.SOL_PRIVATE_KEY;
  console.log("Solana privateKey: \n" + privateKey + '\n');

  const irys = new Irys({
    url: url, // URL of the node you want to connect to
    token: token, // Token used for payment
    key: privateKey, // ETH or SOL private key
    config: { providerUrl: providerUrl }, // Optional provider URL, only required when using Devnet
  });

  return irys;
}

async function checkBalance(): Promise<BigNumber> {
  const irys: Irys = await getIrys();

  // Get loaded balance in atomic units
  
  const atomicBalance: BigNumber = await irys.getLoadedBalance();

  // Convert balance to standard units
  const convertedBalance: BigNumber = irys.utils.fromAtomic(atomicBalance);

  return convertedBalance;
}

const checkAndPrintBalance = async (): Promise<void> => {
  const balance: BigNumber = await checkBalance();
  const threshold: number = 0.1; // 10% threshold

  if (Math.abs(balance.toNumber()) <= threshold) {
    console.log(`Balance ${balance} is within 10% of 0, please fund.`);
  } else {
    console.log(`Balance ${balance} funding not yet needed.`);
  }
};

async function uploadRootFile(fileToUpload: string, commit_name: string, ref_value: string): Promise<String | null> {
  const irys = await getIrys();
  let receipt: UploadResponse | null = null;
  let retval: String | null = null;
  const tags = [{ name: commit_name, value: ref_value }];

  try {
    receipt = await irys.uploadFile(fileToUpload, { tags });
    console.log(`File uploaded ==> https://gateway.irys.xyz/${receipt.id}`);
    retval = receipt.id; 
  } catch (e) {
    console.log("Error uploading file ", e);
  }

  return retval;
}

async function uploadRootModel(fileToUpload: string, commit_name: string, ref_value: string): Promise<String | null> {
	const irys = await getIrys();
  let receipt: UploadResponse | null = null;
  let retval: String | null = null;


	const tags = [{ name: commit_name, value: ref_value }];
 
	try {
		receipt = await irys.uploadFile(fileToUpload, { tags });
		console.log(`File uploaded ==> https://gateway.irys.xyz/${receipt.id}`);
    retval = receipt.id; 
	} catch (e) {
		console.log("Error uploading file ", e);
	}

	return retval;
};

async function uploadRootStringData(dataToUpload: string, commit_name: string, ref_value: string): Promise<String | null> {
	const irys = await getIrys();
  let receipt: UploadResponse | null = null;
	let retval: String | null = null;
  const tags = [{ name: commit_name, value: ref_value }];
	
  try {
		receipt = await irys.upload(dataToUpload, { tags });
		console.log(`Data uploaded ==> https://gateway.irys.xyz/${receipt.id}`);
    retval = receipt.id; 
	} catch (e) {
		console.log("Error uploading data ", e);
	}
    return retval;
};

async function uploadProvFile(fileToUpload: string, rootTxId: string, commit_name: string, ref_value: string): Promise<String | null> {
  const irys = await getIrys();
  let receipt: UploadResponse | null = null;
  let retval: String | null = null;

  const { size } = await fs.promises.stat(fileToUpload);
  const price = await irys.getPrice(size);
  
  const balance: BigNumber = await checkBalance();
  const threshold: number = 0.1; // 10% threshold

  if (Math.abs(balance.toNumber()) <= threshold) {
    await irys.fund(price);
  } 
  
  const priceConverted = irys.utils.fromAtomic(size);
  console.log(`Uploading ${size} bytes costs ${priceConverted}`);
  // Write tags to file ( might remove later as they are only relevant in queries)

  const tags = [
		{ name: commit_name, value: ref_value },
		{ name: "root-tx", value: rootTxId },
	];
 
  // Upload the file and return Irys id.
  
  try {
    receipt = await irys.uploadFile(fileToUpload, { tags });
    console.log(`File uploaded ==> https://gateway.irys.xyz/${receipt.id}`);
    retval = receipt.id; 
  } catch (e) {
    console.log("Error uploading file ", e);
  }

  return retval;
};

async function uploadProvModel(modelToUpload: string, rootTxId: string,  commit_name: string, ref_value: string): Promise<String | null> {
	const irys = await getIrys();
  let receipt: UploadResponse | null = null;
  let retval: String | null = null;
  
  // Get number of bytes to print predicted price! 

  // let filesManager = new FilesManager();
  // const numBytes = filesManager.getFileSize(fileToUpload);
  // const priceConverted = irys.utils.fromAtomic(numBytes);
  // console.log(`Uploading ${numBytes} bytes costs ${priceConverted}`);

  const { size } = await fs.promises.stat(modelToUpload);
  const price = await irys.getPrice(size);
  
  const balance: BigNumber = await checkBalance();
  const threshold: number = 0.1; // 10% threshold

  if (Math.abs(balance.toNumber()) <= threshold) {
    await irys.fund(price);
  } 
  
  const priceConverted = irys.utils.fromAtomic(size);
  console.log(`Uploading ${size} bytes costs ${priceConverted}`);
  // Write tags to file ( might remove later as they are only relevant in queries)

  const tags = [
		{ name: commit_name, value: ref_value },
		{ name: "root-tx", value: rootTxId },
	];
 
  // Upload the file and return Irys id.

	try {
		receipt = await irys.uploadFile(modelToUpload, { tags });
		console.log(`File uploaded ==> https://gateway.irys.xyz/${receipt.id}`);
    retval = receipt.id; 
	} catch (e) {
		console.log("Error uploading file ", e);
	}

	return retval;
};

async function uploadProvStringData(dataToUpload: string, rootTxId: string,  commit_name: string, ref_value: string): Promise<String | null> {
	const irys = await getIrys();
  let receipt: UploadResponse | null = null;
	let retval: String | null = null;
  
  const size = dataToUpload.length; 
  const price = await irys.getPrice(size);
  
  const balance: BigNumber = await checkBalance();
  const threshold: number = 0.1; // 10% threshold

  if (Math.abs(balance.toNumber()) <= threshold) {
    await irys.fund(price);
  } 
  
  const priceConverted = irys.utils.fromAtomic(size);
  console.log(`Uploading ${size} bytes costs ${priceConverted}`);

  // Write tags to file ( might remove later as they are only relevant in queries)
  
  const tags = [
		{ name: commit_name, value: ref_value },
		{ name: "root-tx", value: rootTxId },
	];
	
  try {
		receipt = await irys.upload(dataToUpload, { tags });
		console.log(`Data uploaded ==> https://gateway.irys.xyz/${receipt.id}`);
    retval = receipt.id; 
	} catch (e) {
		console.log("Error uploading data ", e);
	}
    return retval;
};


chai.use(chaiAsPromised);
const url = "https://api.devnet.solana.com";

function createKeypairFromFile(path: string): Keypair {
  return Keypair.fromSecretKey(
      Buffer.from(JSON.parse(require('fs').readFileSync(path, "utf-8")))
  )
};

const getNameKey = async (  name: string,  nameClass?: PublicKey,  parentName?: PublicKey,) => {
  const hashedName = await getHashedName(name);
  const nameAccountKey = await getNameAccountKey(
    hashedName,
    nameClass,
    parentName,
  );
  return nameAccountKey;
};


describe('Name Service Program', async () => {
  const connection = new Connection(url, 'confirmed');
  // const payer = Keypair.generate();
  const payer = createKeypairFromFile(require('os').homedir() + '/.config/solana/id.json');
  //const owner = Keypair.generate();
  const owner = createKeypairFromFile(require('os').homedir() + '/.config/solana/id.json');
  const space = 43;
  let nameKey: PublicKey;
  let name: string;

  checkAndPrintBalance();
  
  // before(async () => {
  //   const airdropSignature = await connection.requestAirdrop(
  //     payer.publicKey,
  //     LAMPORTS_PER_SOL,
  //   );
  //   await connection.confirmTransaction({
  //     signature: airdropSignature,
  //     ...(await connection.getLatestBlockhash()),
  //   });
  // });
  // it('Create Name Registery', async () => {
  //   const nameAccount = await NameRegistryState.retrieve(connection, nameKey);
  //   nameAccount.owner.equals(owner.publicKey);
  //   expect(nameAccount.data?.length).to.eql(space);
  // });
  it('Create Name Registery', async () => {  
    
    // ==================================================================================
    // ----------------------------- Allocate Name Registry -----------------------------
    // ==================================================================================

    const name = Math.random().toString() + '.sol';
    const nameKey = await getNameKey(name);
    const lamports = await connection.getMinimumBalanceForRentExemption(
      space + NameRegistryState.HEADER_LEN,
    );
    let inst = await createNameRegistry(connection,name,space,payer.publicKey,owner.publicKey,lamports);
    let tx = new Transaction().add(inst);
    await sendAndConfirmTransaction(connection, tx, [payer]);

    // ==================================================================================
    // ------------------------------- Place Root Node ----------------------------------
    // ==================================================================================

    let prev_id = "0000000000000000000000000000000000000000000";
    
    console.log("Arweave Id to be stored: \n" + prev_id + '\n');

    let IRYS_ID = await uploadProvModel("../models/model_1.pth",prev_id,"Content-Type","text/plain");
    
    let data = Buffer.from("Nothing",'utf-8');
    if (IRYS_ID == null) {
      console.log("The string is null or undefined.");
    } else {
      console.log("The string is neither null nor undefined.");
      data = Buffer.from(IRYS_ID,'utf-8');
    }

    console.log("Arweave Id to be stored: \n" + data + '\n');
    
    inst = await updateNameRegistryData(connection, name, 0, data);
    tx = new Transaction().add(inst);
    await sendAndConfirmTransaction(connection, tx, [payer, owner]);
    
    let nameAccount = await NameRegistryState.retrieve(connection, nameKey);

    // ==================================================================================
    // -------------------------- Retrieve Name Registry --------------------------------
    // ==================================================================================

    nameAccount = await NameRegistryState.retrieve(connection, nameKey);
    console.log("Arweave Id retrieved from on-chain storage: \n" + nameAccount.data?.toString('utf8') + '\n');
    nameAccount.data?.equals(data);

    // ==================================================================================
    // ------------------------------- Place Additional Nodes ---------------------------
    // ==================================================================================

    nameAccount = await NameRegistryState.retrieve(connection, nameKey);
    prev_id = nameAccount.data?.toString('utf8') ?? "0000000000000000000000000000000000000000000";

    IRYS_ID = await uploadProvModel("../models/model_2.pth",prev_id!,"Content-Type","text/plain");
    
    data = Buffer.from("Nothing",'utf-8');
    if (IRYS_ID == null) {
      console.log("The string is null or undefined.");
    } else {                                                                                                                                                                                           
      console.log("The string is neither null nor undefined.");
      data = Buffer.from(IRYS_ID,'utf-8');
    }

    // console.log("Arweave Id to be stored: \n" + data + '\n');
    
    // inst = await updateNameRegistryData(connection, name, 0, data);
    // tx = new Transaction().add(inst);
    // await sendAndConfirmTransaction(connection, tx, [payer, owner]);

    // ==================================================================================
    // -------------------------- Retrieve Name Registry --------------------------------
    // ==================================================================================

    nameAccount = await NameRegistryState.retrieve(connection, nameKey);
    console.log("Arweave Id retrieved from on-chain storage: \n" + nameAccount.data?.toString('utf8') + '\n');
    nameAccount.data?.equals(data);

    // ==================================================================================
    // ------------------------------- Place Additional Nodes ---------------------------
    // ==================================================================================

    nameAccount = await NameRegistryState.retrieve(connection, nameKey);
    prev_id = nameAccount.data?.toString('utf8') ?? "0000000000000000000000000000000000000000000";

    IRYS_ID = await uploadProvModel("../models/model_3.pth",prev_id!,"Content-Type","text/plain");
    
    data = Buffer.from("Nothing",'utf-8');
    if (IRYS_ID == null) {
      console.log("The string is null or undefined.");
    } else {                                                                                                                                                                                           
      console.log("The string is neither null nor undefined.");
      data = Buffer.from(IRYS_ID,'utf-8');
    }

    // console.log("Arweave Id to be stored: \n" + data + '\n');
    
    // inst = await updateNameRegistryData(connection, name, 0, data);
    // tx = new Transaction().add(inst);
    // await sendAndConfirmTransaction(connection, tx, [payer, owner]);

    // ==================================================================================
    // -------------------------- Retrieve Name Registry --------------------------------
    // ==================================================================================

    nameAccount = await NameRegistryState.retrieve(connection, nameKey);
    console.log("Arweave Id retrieved from on-chain storage: \n" + nameAccount.data?.toString('utf8') + '\n');
    nameAccount.data?.equals(data);

    // ==================================================================================
    // ------------------------------- Place Additional Nodes ---------------------------
    // ==================================================================================

    nameAccount = await NameRegistryState.retrieve(connection, nameKey);
    prev_id = nameAccount.data?.toString('utf8') ?? "0000000000000000000000000000000000000000000";

    IRYS_ID = await uploadProvModel("../models/model_4.pth",prev_id!,"Content-Type","text/plain");
    
    data = Buffer.from("Nothing",'utf-8');
    if (IRYS_ID == null) {
      console.log("The string is null or undefined.");
    } else {                                                                                                                                                                                           
      console.log("The string is neither null nor undefined.");
      data = Buffer.from(IRYS_ID,'utf-8');
    }  
    // ==================================================================================
    // -------------------------- Retrieve Name Registry --------------------------------
    // ==================================================================================

    nameAccount = await NameRegistryState.retrieve(connection, nameKey);
    console.log("Arweave Id retrieved from on-chain storage: \n" + nameAccount.data?.toString('utf8') + '\n');
    nameAccount.data?.equals(data);

    // ==================================================================================
    // ------------------------------- Place Additional Nodes ---------------------------
    // ==================================================================================

    nameAccount = await NameRegistryState.retrieve(connection, nameKey);
    prev_id = nameAccount.data?.toString('utf8') ?? "0000000000000000000000000000000000000000000";

    IRYS_ID = await uploadProvModel("../models/model_5.pth",prev_id!,"Content-Type","text/plain");
    
    data = Buffer.from("Nothing",'utf-8');
    if (IRYS_ID == null) {
      console.log("The string is null or undefined.");
    } else {                                                                                                                                                                                           
      console.log("The string is neither null nor undefined.");
      data = Buffer.from(IRYS_ID,'utf-8');
    }
    // ==================================================================================
    // -------------------------- Retrieve Name Registry --------------------------------
    // ==================================================================================

    nameAccount = await NameRegistryState.retrieve(connection, nameKey);
    console.log("Arweave Id retrieved from on-chain storage: \n" + nameAccount.data?.toString('utf8') + '\n');
    nameAccount.data?.equals(data);

    printProvenanceChainSDK(nameAccount.data?.toString('utf8')!);
    // const url = `https://gateway.irys.xyz/${nameAccount.data?.toString('utf8')!}`;
    // const response = await fetch(url);
		// const dat = await response.text();

    // console.log("Arweave Id to be stored: \n" + prev_id + '\n');

    // ==================================================================================
    // -------------------------- Delete Name Registry ----------------------------------
    // ==================================================================================

    inst = await deleteNameRegistry(connection, name, payer.publicKey);
    tx = new Transaction().add(inst);
    await sendAndConfirmTransaction(connection, tx, [payer, owner]);
    let nullAccount = await connection.getAccountInfo(nameKey);
    expect(nullAccount).to.be.null;

    

  }).timeout(1000000);

  // it('Update Name Registery Model 2', async () => {
  //   console.log("Connection \n" + connection + '  ' + nameKey + '\n');
  //   const readAccount = await NameRegistryState.retrieve(connection, nameKey);
  //   const prev_id = readAccount.data?.toString('utf8') ?? "0000000000000000000000000000000000000000000";;
    
  //   console.log("Arweave Id to be stored: \n" + prev_id + '\n');

  //   const IRYS_ID = await uploadProvStringData("2nd Upload",prev_id!,"Round","2");
    
  //   let data = Buffer.from("Nothing",'utf-8');
  //   if (IRYS_ID == null) {
  //     console.log("The string is null or undefined.");
  //   } else {
  //     console.log("The string is neither null nor undefined.");
  //     data = Buffer.from(IRYS_ID,'utf-8');
  //   }

  //   console.log("Arweave Id to be stored: \n" + data + '\n');
    
    
  //   const inst = await updateNameRegistryData(connection, name, 0, data);
  //   const tx = new Transaction().add(inst);
  //   await sendAndConfirmTransaction(connection, tx, [payer, owner]);
  //   const nameAccount = await NameRegistryState.retrieve(connection, nameKey);
  //   // console.log(nameAccount);
  //   //console.log(JSON.stringify(nameAccount.data));
  //   console.log("Arweave Id retrieved from on-chain storage: \n" + nameAccount.data?.toString('utf8') + '\n');
  //   nameAccount.data?.equals(data);
    
  // }).timeout(100000);

  // it('Update Name Registery Model 2', async () => {
  //   const readAccount = await NameRegistryState.retrieve(connection, nameKey);
  //   const prev_id = readAccount.data?.toString('utf8') ?? "0000000000000000000000000000000000000000000";;
    
  //   console.log("Arweave Id to be stored: \n" + prev_id + '\n');

  //   const IRYS_ID = await uploadProvStringData("2nd Upload",prev_id!,"Round","2");
    
  //   let data = Buffer.from("Nothing",'utf-8');
  //   if (IRYS_ID == null) {
  //     console.log("The string is null or undefined.");
  //   } else {
  //     console.log("The string is neither null nor undefined.");
  //     data = Buffer.from(IRYS_ID,'utf-8');
  //   }

  //   console.log("Arweave Id to be stored: \n" + data + '\n');
    
    
  //   const inst = await updateNameRegistryData(connection, name, 0, data);
  //   const tx = new Transaction().add(inst);
  //   await sendAndConfirmTransaction(connection, tx, [payer, owner]);
  //   const nameAccount = await NameRegistryState.retrieve(connection, nameKey);
  //   // console.log(nameAccount);
  //   //console.log(JSON.stringify(nameAccount.data));
  //   console.log("Arweave Id retrieved from on-chain storage: \n" + nameAccount.data?.toString('utf8') + '\n');
  //   nameAccount.data?.equals(data);

    
  // });

  // it('Update Name Registery Model 3', async () => {
  //   const readAccount = await NameRegistryState.retrieve(connection, nameKey);
  //   const prev_id = readAccount.data?.toString('utf8');
    
  //   const IRYS_ID = await uploadProvStringData("3rd Upload",prev_id || "0000000000000000000000000000000000000000000","Round","3");
    
  //   let data = Buffer.from("Nothing",'utf-8');
  //   if (IRYS_ID == null) {
  //     console.log("The string is null or undefined.");
  //   } else {
  //     console.log("The string is neither null nor undefined.");
  //     data = Buffer.from(IRYS_ID,'utf-8');
  //   }

  //   console.log("Arweave Id to be stored: \n" + data + '\n');
    
    
  //   const inst = await updateNameRegistryData(connection, name, 0, data);
  //   const tx = new Transaction().add(inst);
  //   await sendAndConfirmTransaction(connection, tx, [payer, owner]);
  //   const nameAccount = await NameRegistryState.retrieve(connection, nameKey);
  //   // console.log(nameAccount);
  //   //console.log(JSON.stringify(nameAccount.data));
  //   console.log("Arweave Id retrieved from on-chain storage: \n" + nameAccount.data?.toString('utf8') + '\n');
  //   nameAccount.data?.equals(data);
  // });
 
  // it('Update Name Registery Model 4', async () => {
  //   const readAccount = await NameRegistryState.retrieve(connection, nameKey);
  //   const prev_id = readAccount.data?.toString('utf8');
    
  //   const IRYS_ID = await uploadProvStringData("4th Upload",prev_id || "0000000000000000000000000000000000000000000","Round","4");
    
  //   let data = Buffer.from("Nothing",'utf-8');
  //   if (IRYS_ID == null) {
  //     console.log("The string is null or undefined.");
  //   } else {
  //     console.log("The string is neither null nor undefined.");
  //     data = Buffer.from(IRYS_ID,'utf-8');
  //   }

  //   console.log("Arweave Id to be stored: \n" + data + '\n');
    
    
  //   const inst = await updateNameRegistryData(connection, name, 0, data);
  //   const tx = new Transaction().add(inst);
  //   await sendAndConfirmTransaction(connection, tx, [payer, owner]);
  //   const nameAccount = await NameRegistryState.retrieve(connection, nameKey);
  //   // console.log(nameAccount);
  //   //console.log(JSON.stringify(nameAccount.data));
  //   console.log("Arweave Id retrieved from on-chain storage: \n" + nameAccount.data?.toString('utf8') + '\n');
  //   nameAccount.data?.equals(data);
  // });

  // it('Update Name Registery Model 5', async () => {
  //   const readAccount = await NameRegistryState.retrieve(connection, nameKey);
  //   const prev_id = readAccount.data?.toString('utf8');
    
  //   const IRYS_ID = await uploadProvStringData("5th Upload",prev_id || "0000000000000000000000000000000000000000000","Round","5");
    
  //   let data = Buffer.from("Nothing",'utf-8');
  //   if (IRYS_ID == null) {
  //     console.log("The string is null or undefined.");
  //   } else {
  //     console.log("The string is neither null nor undefined.");
  //     data = Buffer.from(IRYS_ID,'utf-8');
  //   }

  //   console.log("Arweave Id to be stored: \n" + data + '\n');
    
    
  //   const inst = await updateNameRegistryData(connection, name, 0, data);
  //   const tx = new Transaction().add(inst);
  //   await sendAndConfirmTransaction(connection, tx, [payer, owner]);
  //   const nameAccount = await NameRegistryState.retrieve(connection, nameKey);
  //   // console.log(nameAccount);
  //   //console.log(JSON.stringify(nameAccount.data));
  //   console.log("Arweave Id retrieved from on-chain storage: \n" + nameAccount.data?.toString('utf8') + '\n');
  //   nameAccount.data?.equals(data);
  // });

  // it('Transfer Name Ownership', async () => {
  //   const newOwner = Keypair.generate();
  //   const inst = await transferNameOwnership(
  //     connection,
  //     name,
  //     newOwner.publicKey,
  //   );
  //   const tx = new Transaction().add(inst);
  //   await sendAndConfirmTransaction(connection, tx, [payer, owner]);
  //   const nameAccount = await NameRegistryState.retrieve(connection, nameKey);
  //   nameAccount.owner.equals(newOwner.publicKey);
  // });
  // it('Realloc Name Account to bigger space', async () => {
  //   const inst = await reallocNameAccount(
  //     connection,
  //     name,
  //     space + 10,
  //     payer.publicKey,
  //   );
  //   const tx = new Transaction().add(inst);
  //   await sendAndConfirmTransaction(connection, tx, [payer, owner]);
  //   const nameAccount = await NameRegistryState.retrieve(connection, nameKey);
  //   expect(nameAccount.data?.length).to.eql(space + 10);
  // });
  // it('Realloc Name Account to smaller space', async () => {
  //   const inst = await reallocNameAccount(
  //     connection,
  //     name,
  //     space - 10,
  //     payer.publicKey,
  //   );
  //   const tx = new Transaction().add(inst);
  //   await sendAndConfirmTransaction(connection, tx, [payer, owner]);
  //   const nameAccount = await NameRegistryState.retrieve(connection, nameKey);
  //   expect(nameAccount.data?.length).to.eql(space - 10);
  // });
  // it('Delete Name Registry', async () => {
    
  // });
});

